<?php
/**
 * MUSound.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUSound
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.2 (http://modulestudio.de).
 */

/**
 * Installer implementation class.
 */
class MUSound_Installer extends MUSound_Base_Installer
{
        /**
     * Register persistent event handlers.
     * These are listeners for external events of the core and other modules.
     */
    protected function registerPersistentEventHandlers()
    {
        // core -> 
        EventUtil::registerPersistentModuleHandler('MUSound', 'api.method_not_found', array('MUSound_Listener_Core', 'apiMethodNotFound'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'core.preinit', array('MUSound_Listener_Core', 'preInit'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'core.init', array('MUSound_Listener_Core', 'init'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'core.postinit', array('MUSound_Listener_Core', 'postInit'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'controller.method_not_found', array('MUSound_Listener_Core', 'controllerMethodNotFound'));
    
        // front controller -> MUSound_Listener_FrontController
        EventUtil::registerPersistentModuleHandler('MUSound', 'frontcontroller.predispatch', array('MUSound_Listener_FrontController', 'preDispatch'));
    
        // installer -> MUSound_Listener_Installer
        EventUtil::registerPersistentModuleHandler('MUSound', 'installer.module.installed', array('MUSound_Listener_Installer', 'moduleInstalled'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'installer.module.upgraded', array('MUSound_Listener_Installer', 'moduleUpgraded'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'installer.module.uninstalled', array('MUSound_Listener_Installer', 'moduleUninstalled'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'installer.subscriberarea.uninstalled', array('MUSound_Listener_Installer', 'subscriberAreaUninstalled'));
    
        // modules -> MUSound_Listener_ModuleDispatch
        EventUtil::registerPersistentModuleHandler('MUSound', 'module_dispatch.postloadgeneric', array('MUSound_Listener_ModuleDispatch', 'postLoadGeneric'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'module_dispatch.preexecute', array('MUSound_Listener_ModuleDispatch', 'preExecute'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'module_dispatch.postexecute', array('MUSound_Listener_ModuleDispatch', 'postExecute'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'module_dispatch.custom_classname', array('MUSound_Listener_ModuleDispatch', 'customClassname'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'module_dispatch.service_links', array('MUSound_Listener_ModuleDispatch', 'serviceLinks'));
    
        // mailer -> MUSound_Listener_Mailer
        EventUtil::registerPersistentModuleHandler('MUSound', 'module.mailer.api.sendmessage', array('MUSound_Listener_Mailer', 'sendMessage'));
    
        // page -> MUSound_Listener_Page
        EventUtil::registerPersistentModuleHandler('MUSound', 'pageutil.addvar_filter', array('MUSound_Listener_Page', 'pageutilAddvarFilter'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'system.outputfilter', array('MUSound_Listener_Page', 'systemOutputfilter'));
    
        // errors -> MUSound_Listener_Errors
        EventUtil::registerPersistentModuleHandler('MUSound', 'setup.errorreporting', array('MUSound_Listener_Errors', 'setupErrorReporting'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'systemerror', array('MUSound_Listener_Errors', 'systemError'));
    
        // theme -> MUSound_Listener_Theme
        EventUtil::registerPersistentModuleHandler('MUSound', 'theme.preinit', array('MUSound_Listener_Theme', 'preInit'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'theme.init', array('MUSound_Listener_Theme', 'init'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'theme.load_config', array('MUSound_Listener_Theme', 'loadConfig'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'theme.prefetch', array('MUSound_Listener_Theme', 'preFetch'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'theme.postfetch', array('MUSound_Listener_Theme', 'postFetch'));
    
        // view -> MUSound_Listener_View
        EventUtil::registerPersistentModuleHandler('MUSound', 'view.init', array('MUSound_Listener_View', 'init'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'view.postfetch', array('MUSound_Listener_View', 'postFetch'));
    
        // user login -> MUSound_Listener_UserLogin
        EventUtil::registerPersistentModuleHandler('MUSound', 'module.users.ui.login.started', array('MUSound_Listener_UserLogin', 'started'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'module.users.ui.login.veto', array('MUSound_Listener_UserLogin', 'veto'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'module.users.ui.login.succeeded', array('MUSound_Listener_UserLogin', 'succeeded'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'module.users.ui.login.failed', array('MUSound_Listener_UserLogin', 'failed'));
    
        // user logout -> MUSound_Listener_UserLogout
        EventUtil::registerPersistentModuleHandler('MUSound', 'module.users.ui.logout.succeeded', array('MUSound_Listener_UserLogout', 'succeeded'));
    
        // user -> MUSound_Listener_User
        EventUtil::registerPersistentModuleHandler('MUSound', 'user.gettheme', array('MUSound_Listener_User', 'getTheme'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'user.account.create', array('MUSound_Listener_User', 'create'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'user.account.update', array('MUSound_Listener_User', 'update'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'user.account.delete', array('MUSound_Listener_User', 'delete'));
    
        // registration -> MUSound_Listener_UserRegistration
        EventUtil::registerPersistentModuleHandler('MUSound', 'module.users.ui.registration.started', array('MUSound_Listener_UserRegistration', 'started'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'module.users.ui.registration.succeeded', array('MUSound_Listener_UserRegistration', 'succeeded'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'module.users.ui.registration.failed', array('MUSound_Listener_UserRegistration', 'failed'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'user.registration.create', array('MUSound_Listener_UserRegistration', 'create'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'user.registration.update', array('MUSound_Listener_UserRegistration', 'update'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'user.registration.delete', array('MUSound_Listener_UserRegistration', 'delete'));
    
        // users module -> MUSound_Listener_Users
        EventUtil::registerPersistentModuleHandler('MUSound', 'module.users.config.updated', array('MUSound_Listener_Users', 'configUpdated'));
    
        // group -> MUSound_Listener_Group
        EventUtil::registerPersistentModuleHandler('MUSound', 'group.create', array('MUSound_Listener_Group', 'create'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'group.update', array('MUSound_Listener_Group', 'update'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'group.delete', array('MUSound_Listener_Group', 'delete'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'group.adduser', array('MUSound_Listener_Group', 'addUser'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'group.removeuser', array('MUSound_Listener_Group', 'removeUser'));
    
        // special purposes and 3rd party api support -> MUSound_Listener_ThirdParty
        EventUtil::registerPersistentModuleHandler('MUSound', 'get.pending_content', array('MUSound_Listener_ThirdParty', 'pendingContentListener'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'module.content.gettypes', array('MUSound_Listener_ThirdParty', 'contentGetTypes'));
    
        
        EventUtil::registerPersistentModuleHandler('MUSound', 'module.scribite.editorhelpers', array('MUSound_Listener_ThirdParty', 'getEditorHelpers'));
        EventUtil::registerPersistentModuleHandler('MUSound', 'moduleplugin.tinymce.externalplugins', array('MUSound_Listener_ThirdParty', 'getTinyMcePlugins'));
        EventUtil::registerPersistentModuleHandler('MUsound', 'moduleplugin.ckeditor.externalplugins', array('MUSound_Listener_ThirdParty', 'getCKEditorPlugins'));
    }
}
