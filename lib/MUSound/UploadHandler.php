<?php
/**
 * MUSound.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUSound
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

/**
 * Upload handler implementation class.
 */
class MUSound_UploadHandler extends MUSound_Base_AbstractUploadHandler
{
    /**
     * Constructor initialising the supported object types.
     */
    public function __construct()
    {
        parent::__construct();
        $this->allowedFileSizes = array('album' => array('uploadCover' => ModUtil::getVar('MUSound', 'maxSizeCover', 102400)), 'track' => array('uploadTrack' => ModUtil::getVar('MUSound', 'maxSizeTrack', 102400), 'uploadZip' => 1024000));

    }
    
    /**
     * Determines the allowed file extensions for a given object type.
     *
     * @param string $objectType Currently treated entity type.
     * @param string $fieldName  Name of upload field.
     * @param string $extension  Input file extension.
     *
     * @return array the list of allowed file extensions
     */
    protected function isAllowedFileExtension($objectType, $fieldName, $extension)
    {
        // determine the allowed extensions
        $allowedExtensions = array();
        switch ($objectType) {
            case 'album':
                $allowedExtensions = explode(',', ModUtil::getVar('MUSound', 'allowedExtensionCover'));
                break;
            case 'track':
                switch ($fieldName) {
                    case 'uploadTrack':
                        $allowedExtensions = array('mp3');
                        break;
                    case 'uploadZip':
                        $allowedExtensions = array('zip');
                        break;
                }
                break;
        }
    
        if (count($allowedExtensions) > 0) {
            if (!in_array($extension, $allowedExtensions)) {
                return false;
            }
        }
    
        if (in_array($extension, $this->forbiddenFileTypes)) {
            return false;
        }
    
        return true;
    }
}
