<?php
/**
 * Sound.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\SoundModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use Gedmo\Translatable\Translatable;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Validator\Constraints as Assert;
use Zikula\Core\Doctrine\EntityAccess;
use MU\SoundModule\Traits\StandardFieldsTrait;
use MU\SoundModule\Validator\Constraints as SoundAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for album entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 */
abstract class AbstractAlbumEntity extends EntityAccess implements Translatable
{
    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'album';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @SoundAssert\ListEntry(entityName="album", propertyName="workflowState", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * @Gedmo\Translatable
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $title
     */
    protected $title = '';
    
    /**
     * @Gedmo\Translatable
     * @ORM\Column(type="text", length=2000)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="2000")
     * @var text $description
     */
    protected $description = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $author
     */
    protected $author = '';
    
    /**
     * Upload cover meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $uploadCoverMeta
     */
    protected $uploadCoverMeta = [];
    
    /**
     * @ORM\Column(length=255, nullable=true)
     * @Assert\Length(min="0", max="255")
     * @Assert\File(
     *    maxSize = "200k",
     *    mimeTypes = {"image/*"}
     * )
     * @Assert\Image(
     * )
     * @var string $uploadCover
     */
    protected $uploadCover = null;
    
    /**
     * Full upload cover path as url.
     *
     * @Assert\Type(type="string")
     * @var string $uploadCoverUrl
     */
    protected $uploadCoverUrl = '';
    
    /**
     * @ORM\Column(type="datetime", nullable=true)
     * @Assert\DateTime()
     * @var DateTime $publishedDate
     */
    protected $publishedDate;
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $publishedText
     */
    protected $publishedText = '';
    
    
    /**
     * Used locale to override Translation listener's locale.
     * this is not a mapped field of entity metadata, just a simple property.
     *
     * @Assert\Locale()
     * @Gedmo\Locale
     * @var string $locale
     */
    protected $locale;
    
    /**
     * @ORM\OneToMany(targetEntity="\MU\SoundModule\Entity\AlbumCategoryEntity", 
     *                mappedBy="entity", cascade={"all"}, 
     *                orphanRemoval=true)
     * @var \MU\SoundModule\Entity\AlbumCategoryEntity
     */
    protected $categories = null;
    
    /**
     * Bidirectional - Many album [albums] are linked by one collection [collection] (OWNING SIDE).
     *
     * @ORM\ManyToOne(targetEntity="MU\SoundModule\Entity\CollectionEntity", inversedBy="album")
     * @ORM\JoinTable(name="mu_sound_collection")
     * @Assert\Type(type="MU\SoundModule\Entity\CollectionEntity")
     * @var \MU\SoundModule\Entity\CollectionEntity $collection
     */
    protected $collection;
    
    /**
     * Bidirectional - One album [album] has many track [tracks] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="MU\SoundModule\Entity\TrackEntity", mappedBy="album")
     * @ORM\JoinTable(name="mu_sound_albumtrack")
     * @var \MU\SoundModule\Entity\TrackEntity[] $track
     */
    protected $track = null;
    
    
    /**
     * AlbumEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
        $this->track = new ArrayCollection();
        $this->categories = new ArrayCollection();
    }
    
    /**
     * Returns the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        if ($this->_objectType != $_objectType) {
            $this->_objectType = $_objectType;
        }
    }
    
    
    /**
     * Returns the id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param integer $id
     *
     * @return void
     */
    public function setId($id)
    {
        if (intval($this->id) !== intval($id)) {
            $this->id = intval($id);
        }
    }
    
    /**
     * Returns the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = isset($workflowState) ? $workflowState : '';
        }
    }
    
    /**
     * Returns the title.
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }
    
    /**
     * Sets the title.
     *
     * @param string $title
     *
     * @return void
     */
    public function setTitle($title)
    {
        if ($this->title !== $title) {
            $this->title = isset($title) ? $title : '';
        }
    }
    
    /**
     * Returns the description.
     *
     * @return text
     */
    public function getDescription()
    {
        return $this->description;
    }
    
    /**
     * Sets the description.
     *
     * @param text $description
     *
     * @return void
     */
    public function setDescription($description)
    {
        if ($this->description !== $description) {
            $this->description = isset($description) ? $description : '';
        }
    }
    
    /**
     * Returns the author.
     *
     * @return string
     */
    public function getAuthor()
    {
        return $this->author;
    }
    
    /**
     * Sets the author.
     *
     * @param string $author
     *
     * @return void
     */
    public function setAuthor($author)
    {
        if ($this->author !== $author) {
            $this->author = isset($author) ? $author : '';
        }
    }
    
    /**
     * Returns the upload cover.
     *
     * @return string
     */
    public function getUploadCover()
    {
        return $this->uploadCover;
    }
    
    /**
     * Sets the upload cover.
     *
     * @param string $uploadCover
     *
     * @return void
     */
    public function setUploadCover($uploadCover)
    {
        if ($this->uploadCover !== $uploadCover) {
            $this->uploadCover = $uploadCover;
        }
    }
    
    /**
     * Returns the upload cover url.
     *
     * @return string
     */
    public function getUploadCoverUrl()
    {
        return $this->uploadCoverUrl;
    }
    
    /**
     * Sets the upload cover url.
     *
     * @param string $uploadCoverUrl
     *
     * @return void
     */
    public function setUploadCoverUrl($uploadCoverUrl)
    {
        if ($this->uploadCoverUrl !== $uploadCoverUrl) {
            $this->uploadCoverUrl = $uploadCoverUrl;
        }
    }
    
    /**
     * Returns the upload cover meta.
     *
     * @return array
     */
    public function getUploadCoverMeta()
    {
        return $this->uploadCoverMeta;
    }
    
    /**
     * Sets the upload cover meta.
     *
     * @param array $uploadCoverMeta
     *
     * @return void
     */
    public function setUploadCoverMeta($uploadCoverMeta = [])
    {
        if ($this->uploadCoverMeta !== $uploadCoverMeta) {
            $this->uploadCoverMeta = $uploadCoverMeta;
        }
    }
    
    /**
     * Returns the published date.
     *
     * @return DateTime
     */
    public function getPublishedDate()
    {
        return $this->publishedDate;
    }
    
    /**
     * Sets the published date.
     *
     * @param DateTime $publishedDate
     *
     * @return void
     */
    public function setPublishedDate($publishedDate)
    {
        if ($this->publishedDate !== $publishedDate) {
            if (is_object($publishedDate) && $publishedDate instanceOf \DateTime) {
                $this->publishedDate = $publishedDate;
            } elseif (null === $publishedDate || empty($publishedDate)) {
                $this->publishedDate = null;
            } else {
                $this->publishedDate = new \DateTime($publishedDate);
            }
        }
    }
    
    /**
     * Returns the published text.
     *
     * @return string
     */
    public function getPublishedText()
    {
        return $this->publishedText;
    }
    
    /**
     * Sets the published text.
     *
     * @param string $publishedText
     *
     * @return void
     */
    public function setPublishedText($publishedText)
    {
        if ($this->publishedText !== $publishedText) {
            $this->publishedText = isset($publishedText) ? $publishedText : '';
        }
    }
    
    /**
     * Returns the locale.
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->locale;
    }
    
    /**
     * Sets the locale.
     *
     * @param string $locale
     *
     * @return void
     */
    public function setLocale($locale)
    {
        if ($this->locale != $locale) {
            $this->locale = $locale;
        }
    }
    
    /**
     * Returns the categories.
     *
     * @return ArrayCollection[]
     */
    public function getCategories()
    {
        return $this->categories;
    }
    
    
    /**
     * Sets the categories.
     *
     * @param ArrayCollection $categories
     *
     * @return void
     */
    public function setCategories(ArrayCollection $categories)
    {
        foreach ($this->categories as $category) {
            if (false === $key = $this->collectionContains($categories, $category)) {
                $this->categories->removeElement($category);
            } else {
                $categories->remove($key);
            }
        }
        foreach ($categories as $category) {
            $this->categories->add($category);
        }
    }
    
    /**
     * Checks if a collection contains an element based only on two criteria (categoryRegistryId, category).
     *
     * @param ArrayCollection $collection
     * @param \MU\SoundModule\Entity\AlbumCategoryEntity $element
     *
     * @return bool|int
     */
    private function collectionContains(ArrayCollection $collection, \MU\SoundModule\Entity\AlbumCategoryEntity $element)
    {
        foreach ($collection as $key => $category) {
            /** @var \MU\SoundModule\Entity\AlbumCategoryEntity $category */
            if ($category->getCategoryRegistryId() == $element->getCategoryRegistryId()
                && $category->getCategory() == $element->getCategory()
            ) {
                return $key;
            }
        }
    
        return false;
    }
    
    /**
     * Returns the collection.
     *
     * @return \MU\SoundModule\Entity\CollectionEntity
     */
    public function getCollection()
    {
        return $this->collection;
    }
    
    /**
     * Sets the collection.
     *
     * @param \MU\SoundModule\Entity\CollectionEntity $collection
     *
     * @return void
     */
    public function setCollection($collection = null)
    {
        $this->collection = $collection;
    }
    
    /**
     * Returns the track.
     *
     * @return \MU\SoundModule\Entity\TrackEntity[]
     */
    public function getTrack()
    {
        return $this->track;
    }
    
    /**
     * Sets the track.
     *
     * @param \MU\SoundModule\Entity\TrackEntity[] $track
     *
     * @return void
     */
    public function setTrack($track)
    {
        foreach ($this->track as $trackSingle) {
            $this->removeTrack($trackSingle);
        }
        foreach ($track as $trackSingle) {
            $this->addTrack($trackSingle);
        }
    }
    
    /**
     * Adds an instance of \MU\SoundModule\Entity\TrackEntity to the list of track.
     *
     * @param \MU\SoundModule\Entity\TrackEntity $track The instance to be added to the collection
     *
     * @return void
     */
    public function addTrack(\MU\SoundModule\Entity\TrackEntity $track)
    {
        $this->track->add($track);
        $track->setAlbum($this);
    }
    
    /**
     * Removes an instance of \MU\SoundModule\Entity\TrackEntity from the list of track.
     *
     * @param \MU\SoundModule\Entity\TrackEntity $track The instance to be removed from the collection
     *
     * @return void
     */
    public function removeTrack(\MU\SoundModule\Entity\TrackEntity $track)
    {
        $this->track->removeElement($track);
        $track->setAlbum(null);
    }
    
    
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array The resulting arguments list
     */
    public function createUrlArgs()
    {
        return [
            'id' => $this->getId()
        ];
    }
    
    /**
     * Returns the primary key.
     *
     * @return integer The identifier
     */
    public function getKey()
    {
        return $this->getId();
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'musoundmodule.ui_hooks.albums';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects The objects are added to this array. Default: []
     * 
     * @return array of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = []) 
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return 'Album ' . $this->getKey() . ': ' . $this->getTitle();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
        // reset upload fields
        $this->setUploadCover(null);
        $this->setUploadCoverMeta([]);
        $this->setUploadCoverUrl('');
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    
    
        // clone categories
        $categories = $this->categories;
        $this->categories = new ArrayCollection();
        foreach ($categories as $c) {
            $newCat = clone $c;
            $this->categories->add($newCat);
            $newCat->setEntity($this);
        }
    }
}
